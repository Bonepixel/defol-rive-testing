local function rive_event_handler(self, message_id, message)
	print("received event", message.name)
end

function init(self)
	msg.post(".", "acquire_input_focus")

	
	
	rive.play_state_machine("#rivemodel", "State Machine 1", nil, rive_event_handler)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	
	
	
	--rive.set_text_run("#rivemodel","Run 1","Run 1")
	self.viewmodel = rive.databind.create_view_model_instance_runtime("#rivemodel","play_button_model")
	pprint(self.viewmodel)
	rive.databind.set_view_model_instance_runtime("#rivemodel", self.viewmodel)
	
	

	rive.databind.set_properties("#rivemodel", self.viewmodel, {test = "wack"})
	
	rive.databind.set_properties("#rivemodel", self.viewmodel, {boolprop = true})
	
	pprint(rive.databind.get_property("#rivemodel", self.viewmodel, "boolprop"))

	self.color = vmath.vector4(0, 0, 0, 0)

	pprint(rive.databind.get_property("#rivemodel", self.viewmodel, "colorup"))

	
	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if not action_id or action_id == hash("touch") then
		if action.pressed then
			rive.pointer_down("#rivemodel", action.x, action.y)
			rive.databind.set_properties("#rivemodel", self.viewmodel, {triggerprop = true})
			pprint(rive.databind.get_property("#rivemodel", self.viewmodel, "triggerprop"))
			
		elseif action.released then
			rive.pointer_up("#rivemodel", action.x, action.y)
		else
			rive.pointer_move("#rivemodel", action.x, action.y)
		end
	end

	if action.pressed and action_id == "up" then
		print("true")
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
